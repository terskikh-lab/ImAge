
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace lorentz_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 33> locations_array__ = 
{" (found before start of program)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 15, column 4 to column 21)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 16, column 4 to column 29)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 17, column 4 to column 29)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 20, column 4 to column 19)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 23, column 8 to column 47)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 22, column 4 to line 23, column 47)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 26, column 4 to column 14)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 27, column 4 to column 14)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 29, column 4 to column 54)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 32, column 8 to column 37)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 31, column 4 to line 32, column 37)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 37, column 16 to column 61)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 38, column 16 to column 61)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 40, column 16 to column 57)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 36, column 35 to line 41, column 13)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 36, column 12 to line 41, column 13)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 35, column 24 to line 42, column 9)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 35, column 8 to line 42, column 9)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 34, column 17 to line 43, column 5)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 34, column 4 to line 43, column 5)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 7, column 4 to column 19)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 8, column 4 to column 19)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 9, column 11 to column 12)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 9, column 14 to column 15)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 9, column 4 to column 25)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 12, column 4 to column 30)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 15, column 18 to column 19)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 15, column 11 to column 12)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 16, column 22 to column 23)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 20, column 11 to column 12)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 3, column 8 to column 50)",
 " (in '/nadata/cjc/miel/kenta/ImAge_test/ImAge-main/scripts/Hyperbolic/lorentz.stan', line 2, column 52 to line 4, column 5)"};

struct hyp_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                       stan::base_type_t<T3__>>
  operator()(const T0__& t1, const T1__& t2, const T2__& E1, const T3__& E2,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>>
  hyp(const T0__& t1, const T1__& t2, const T2__& E1_arg__,
      const T3__& E2_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& E1 = stan::math::to_ref(E1_arg__);
    const auto& E2 = stan::math::to_ref(E2_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 31;
      return stan::math::acosh(((t1 * t2) - stan::math::dot_product(E1, E2)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<T0__, T1__, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>>
hyp_functor__::operator()(const T0__& t1, const T1__& t2, const T2__& E1,
                          const T3__& E2, std::ostream* pstream__)  const
{
  return hyp(t1, t2, E1, E2, pstream__);
}

 class lorentz_model final : public model_base_crtp<lorentz_model> {

 private:
  int N;
  int D;
  Eigen::Matrix<double, -1, -1> deltaij_data__;
  double Nterms; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> deltaij{nullptr, 0, 0};
 
 public:
  ~lorentz_model() { }
  
  inline std::string model_name() const final { return "lorentz_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --filename-in-msg=lorentz.stan"};
  }
  
  
  lorentz_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lorentz_model_namespace::lorentz_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 21;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 22;
      context__.validate_dims("data initialization","D","int",
           std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      
      
      current_statement__ = 22;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("deltaij", "N", N);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("deltaij", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization","deltaij","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N)});
      deltaij_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      new (&deltaij) Eigen::Map<Eigen::Matrix<double, -1, -1>>(deltaij_data__.data(), N, N);
        
      
      {
        std::vector<local_scalar_t__> deltaij_flat__;
        current_statement__ = 25;
        deltaij_flat__ = context__.vals_r("deltaij");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 25;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 25;
            stan::model::assign(deltaij, deltaij_flat__[(pos__ - 1)],
              "assigning variable deltaij", stan::model::index_uni(sym2__),
                                              stan::model::index_uni(sym1__));
            current_statement__ = 25;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 26;
      Nterms = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 26;
      Nterms = ((0.5 * N) * (N - 1));
      current_statement__ = 27;
      stan::math::validate_non_negative_index("euc", "N", N);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("euc", "D", D);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("sig", "N", N);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("time", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * D) + N + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lorentz_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> euc =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(D, DUMMY_VAR__));
      current_statement__ = 1;
      euc = in__.template read<
              std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, D);
      Eigen::Matrix<local_scalar_t__, -1, 1> sig =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 2;
      sig = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0.0, lp__,
              N);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 3;
      lambda = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0.001, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> time =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 5;
        stan::model::assign(time,
          stan::math::sqrt(
            (1.0 +
              stan::math::dot_self(
                stan::model::rvalue(euc, "euc", stan::model::index_uni(i))))),
          "assigning variable time", stan::model::index_uni(i));
      }
      {
        local_scalar_t__ dist = DUMMY_VAR__;
        local_scalar_t__ seff = DUMMY_VAR__;
        current_statement__ = 9;
        lp_accum__.add(
          (((-Nterms * 0.5) * stan::math::square(lambda)) /
            stan::math::square(10.0)));
        current_statement__ = 11;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 10;
          lp_accum__.add(
            stan::math::inv_gamma_lpdf<propto__>(
              stan::model::rvalue(sig, "sig", stan::model::index_uni(i)),
              2.0, 0.5));
        }
        current_statement__ = 20;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 18;
          for (int j = (i + 1); j <= N; ++j) {
            current_statement__ = 16;
            if (stan::math::logical_gt(
                  stan::model::rvalue(deltaij, "deltaij",
                    stan::model::index_uni(i), stan::model::index_uni(j)),
                  0.0)) {
              current_statement__ = 12;
              dist = hyp(
                       stan::model::rvalue(time, "time",
                         stan::model::index_uni(i)),
                       stan::model::rvalue(time, "time",
                         stan::model::index_uni(j)),
                       stan::model::rvalue(euc, "euc",
                         stan::model::index_uni(i)),
                       stan::model::rvalue(euc, "euc",
                         stan::model::index_uni(j)), pstream__);
              current_statement__ = 13;
              seff = stan::math::sqrt(
                       (stan::math::square(
                          stan::model::rvalue(sig, "sig",
                            stan::model::index_uni(i))) +
                         stan::math::square(
                           stan::model::rvalue(sig, "sig",
                             stan::model::index_uni(j)))));
              current_statement__ = 14;
              lp_accum__.add(
                stan::math::normal_lpdf<propto__>(
                  stan::model::rvalue(deltaij, "deltaij",
                    stan::model::index_uni(i), stan::model::index_uni(j)),
                  (dist / lambda), seff));
            } 
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lorentz_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> euc =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(D,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      euc = in__.template read<
              std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(N, D);
      Eigen::Matrix<double, -1, 1> sig =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sig = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0.0, lp__,
              N);
      double lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      lambda = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0.001, lp__);
      Eigen::Matrix<double, -1, 1> time =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(euc[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sig);
      out__.write(lambda);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 5;
        stan::model::assign(time,
          stan::math::sqrt(
            (1.0 +
              stan::math::dot_self(
                stan::model::rvalue(euc, "euc", stan::model::index_uni(i))))),
          "assigning variable time", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(time);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> euc =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(D, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          stan::model::assign(euc, in__.read<local_scalar_t__>(),
            "assigning variable euc", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
        }
      }
      out__.write(euc);
      Eigen::Matrix<local_scalar_t__, -1, 1> sig =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        stan::model::assign(sig, in__.read<local_scalar_t__>(),
          "assigning variable sig", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0.0, sig);
      local_scalar_t__ lambda = DUMMY_VAR__;
      lambda = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.001, lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"euc", "sig", "lambda", "time"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   ,
                                                                   static_cast<size_t>(D)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "euc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sig" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "lambda");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "euc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sig" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "lambda");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "time" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"euc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(D) + "}},\"block\":\"parameters\"},{\"name\":\"sig\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"euc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(D) + "}},\"block\":\"parameters\"},{\"name\":\"sig\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"time\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((N * D) + N) + 1);
      const size_t num_transformed = emit_transformed_parameters * N;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((N * D) + N) + 1);
      const size_t num_transformed = emit_transformed_parameters * N;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"euc", "sig", "lambda"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{(N * D), 
       N, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = lorentz_model_namespace::lorentz_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lorentz_model_namespace::profiles__;
}

#endif


